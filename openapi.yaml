swagger: "2.0"

#Meta info
info:
  version: "1.0"
  title: "FieldTrack"
  description: |
    FieldTrack is a solution to manage on-field service operations effectively. Our APIs will let you build services and solutions for both "End cosumers" and "Managing background operations".
    
    Primary use case:
    
    i) Companies, who are providing in-premise services for maintenance of home or industrial appliances can use FieldTrack. Once they receives a service request from a client, based on the location and type of case, they allocate a service engineer. Then the service engineer visits client's location to perform that maintenance job.
      That complete flow, from managing client's cases, to tracking service engineers, can be easily managed using this all-in-one Fieldtrack platform.
      
host: "fieldtrack.xyz"
basePath: "/v1.0"
schemes:
  - "http"
  - "https"
security:
  - ApiKeyAuth: []
consumes:
  - "application/json"
produces:
  - "application/json"  
tags:
  - name: "Users"
    description:  |
      In FieldTrack, users can be agents, service engineers or technicians. The users endpoints can be used to login to the system, to check status of assigned cases and to update details on work performed at client location etc.
  - name: "Cases"
    description: |
      Cases are nothing but service requests coming from clients or customers.
      Cases endpoints can be used to raise new service request or case, get list of open cases for an user and to update a case.
  - name: "Clients"
    description:  "Clients are end-users or customers who are raising all these cases or service requsts. Use clients endpoints "
  - name: "Locations"
    description:  "Locations are actual cities, districts where agents are prividing serivces."
  - name: "Stats"
    description:  "Use these endpoints to get useful statistics based on location, client, user etc."

    
# Paths
paths:
  /users/sign_in:
    post:
      summary:  "User signin"
      security: []   # No security
      description:  |
        The Signin endpoint allows you to authorize your application and get an access_token using the email and password.
      tags:
        - "Users"
      parameters:      
        - in: "body"
          name: "user"
          description:  "Sample payload for user signin"
          required: true
          schema:
            $ref: "#/definitions/SigninRequestBody"
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            $ref: "#/definitions/SigninResponse"
        "401":
          description:  "Status-Code: 401 unauthorized"
          schema:
            type: string
            example: "Invalid email or password"         
  /users/{id}:
    get:
      summary:  "Get user details"
      description:  |
        This endpoint returns the details of an authenticated user. Response includes information such as name, email, rating, and account status.
      tags:
        - "Users"
      parameters:
        - name: "id"
          in: "path"
          type: "string"
          required: true   
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            $ref: "#/definitions/UserDetailsResponse"
  /cases:
    get:
      summary: "Get cases"
      description:  |
        This endpoint returns the list of all cases. The response can be filtered by: state (open, allocated, in_progress, completed, closed), client, location, appointment_date, assignee, date (using from_date), date range (using from_date and to_date) etc.
      tags:
        - "Cases"
      parameters:
        - name: state
          in: query
          type: string
          description: |
            Use this parameter to filter cases by state. Sample values: open, allocated, in_progress, completed, closed
        - name: client_id
          in: query
          type: string
          description: Filter cases by client ID.
        - name: location_id
          in: query
          type: string
          description: Filter cases by location ID.
        - name: appointment_date    
          in: query
          type: string      
          description: Filter cases by appointment date.
        - name: assignee_id
          in: query
          type: string    
          description: Filter cases by assignee ID.
        - name: from_date    
          in: query
          type: string      
          description: To filter results by a date, use this parameter.
        - name: to_date    
          in: query
          type: string      
          description: To filter results by a date range, use to_date parameter along with from_date parameter.                    
        - name: page
          in: query
          type: string
          description: Response of the cases endpoint is paginated by default. Use this parameter to get cases with different page numbers.
        - name: per
          in: query
          type: string    
          description: By default, the cases endpoint returns 20 results per page. If you need more or less data, tweak this parameter value accordingly.
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "20 results found"
              meta:
                type: object
                properties:
                  total_result_count:
                    type: integer
                    example: 56
                  page:
                    type: integer
                    example: 1
                  per:
                    type: integer
                    example: 20
              payload:
                type: array
                items:
                  $ref: "#/definitions/Case"
                example:
                  - id: 38
                    case_number: CS129
                    client_id: 345
                    client_name: Apollo Hospital
                    location_id:  4
                    location_name:  Kolkata
                    appointment_datetime: 04-06-2022 10AM
                    state: open
                    assignee_id: 123
                    started_at: 04-06-2022 10AM
                    closed_at: 04-06-2022 11AM    
                    actual_time: 60
                    rating: 9                
                  - id: 114
                    case_number: CS130
                    client_id: 2121
                    client_name: Fortis Hospital
                    location_id:  5
                    location_name:  Delhi
                    appointment_datetime: 04-06-2022 10AM
                    state: allocated
                    assignee_id: 45
                    started_at: 04-06-2022 10AM
                    closed_at: 04-06-2022 12AM    
                    actual_time: 120
                    rating: 8
    post:
      summary:  "Create new case"
      description:  |
        This endpoint allows us to register a new case.
      tags:
        - "Cases"
      parameters:
        - in: "body"
          name: "case"
          description:  "Sample payload for creating a case"
          required: true
          schema:
            $ref: "#/definitions/CreateCaseRequestBody"
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "Case created successfully"
              meta:
                type: object
              payload:          
                $ref: "#/definitions/Case"
        "422":
          description:  "Status-Code: 422 Unprocessable Entity"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unable to create this case"
              meta:
                type: object 
              payload:
                type: object
                example:
                  {
                    case_number: ["Can't be blank", "Should not contain space"],
                    customer_id: ["Customer not found"]
                  } 

  /cases/{case_number}:
    get:
      summary:  "Get a case details"
      description:  "This endpoint returns case details by case number. The response includes important details like: appointment datetime, current state, due date, assignee details etc."
      tags:
        - "Cases" 
      parameters:
        - name: "case_number"
          in: "path"
          type: "string"
          required: true
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "A case found with number: CS212"
              meta:
                type: object
              payload:            
                $ref: "#/definitions/Case"    
        "404":
          description:  "No case found"  
    put:
      summary:  "Update a case"
      description:  |
        This endpoint allows updating the case details, like: changing state, adding comments with images etc. 
      tags:
        - "Cases" 
      parameters:
        - name: "case_number"
          in: "path"
          type: "string"
          required: true
        - name: "case"
          in: "body"
          description:  "Sample payload for updating a case"
          required: true
          schema:
            $ref: "#/definitions/UpdateCaseRequestBody"
      responses:
        "200":
          description: "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "Case updated successfully"
              meta:
                type: object
              payload:          
                $ref: "#/definitions/Case"
        "422":
          description:  "Status-Code: 422 Unprocessable Entity"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unable to update this case"
              meta:
                type: object 
              payload:
                type: object
                example:
                  {
                    assignee_id: ["Assignee not available on provided datetime"],
                    appointment_datetime: ["Schedule appointment before due date"]
                  } 
  /cases/{case_number}/add_comment:
    post:
      summary:  "Add comment on a case"
      description:  |
        This endpoint allows user to add comments against a case number. A comment can contain text or image or both.
      tags:
        - "Cases" 
      parameters:
        - name: "case_number"
          in: "path"
          type: "string"
          required: true
        - name: "case_comment"
          in: "body"
          description:  "Sample payload for adding a comment against a case"
          required: true
          schema:
            $ref: "#/definitions/AddCaseCommentRequestBody"
      responses:
        "200":
          description: "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "Commented successfully"
              meta:
                type: object
              payload:          
                $ref: "#/definitions/CaseComment"
        "422":
          description:  "Status-Code: 422 Unprocessable Entity"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unable to add comment"
              meta:
                type: object 
              payload:
                type: object
                example:
                  {
                    attachment: ["File too large, should be less than 10MB."]
                  }  
  /cases/{case_number}/log_time:
    post:
      summary:  "Log time on a case"
      description:  |
        This endpoint allows user to log time against a case number. This update can also contain remarks and image, but it's optional.
      tags:
        - "Cases" 
      parameters:
        - name: "case_number"
          in: "path"
          type: "string"
          required: true
        - name: "case_time_log"
          in: "body"
          description:  "Sample payload for logging time against a case"
          required: true
          schema:
            $ref: "#/definitions/CaseTimeLogRequestBody"
      responses:
        "200":
          description: "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "Logged time successfully"
              meta:
                type: object
              payload:          
                $ref: "#/definitions/CaseTimeLog"
        "422":
          description:  "Status-Code: 422 Unprocessable Entity"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unable to log time"
              meta:
                type: object 
              payload:
                type: object
                example:
                  {
                    attachment: ["File too large, should be less than 10MB."]
                  }                       
  /clients:
    get:
      summary: "Get clients"
      description:  |
        This endpoint returns the list of all clients. The response can be filtered by: client's name, location, phone_number etc.
      tags:
        - "Clients"
      parameters:
        - name: name
          in: query
          type: string
          description: |
            Use this parameter to filter clients by name
        - name: phone_number
          in: query
          type: string
          description: Use this parameter to search client by phone number
        - name: location_id
          in: query
          type: string
          description: Filter clients by location ID.    
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "20 results found"
              meta:
                type: object
                properties:
                  total_result_count:
                    type: integer
                    example: 56
                  page:
                    type: integer
                    example: 1
                  per:
                    type: integer
                    example: 20
              payload:
                type: array
                items:
                  $ref: "#/definitions/Client"
                example:
                  - id: 38
                    name: "Apollo Hospital"
                    email: "apollo.h@gmail.com"
                    location_id:  4
                  - id: 32
                    name: "Fortis Hospital"
                    email: "fortis@gmail.com"
                    location_id:  4                    
                  - id: 32
                    name: "Medica Hospital"
                    email: "medica@gmail.com"
                    location_id:  4                                        
  /clients/{id}:
    get:
      summary:  "Get a client details"
      description:  |
        This endpoint returns client details by ID. The response includes details like: client name, phone number, email ID etc.
      tags:
        - "Clients" 
      parameters:
        - name: "id"
          in: "path"
          type: "string"
          required: true
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "Client found with ID: 21"
              meta:
                type: object
              payload:            
                $ref: "#/definitions/Client"    
        "404":
          description:  "No client found"  

  /locations:
    get:
      summary: "Get locations"
      description:  |
        This endpoint returns the list of all locations. The response can be filtered by: location name.
      tags:
        - "Locations"
      parameters:
        - name: name
          in: query
          type: string
          description: |
            Use this parameter to filter locations by name        
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "20 results found"
              meta:
                type: object
                properties:
                  total_result_count:
                    type: integer
                    example: 23
                  page:
                    type: integer
                    example: 1
                  per:
                    type: integer
                    example: 20
              payload:
                type: array
                items:
                  $ref: "#/definitions/Location"
                example:
                  - id: 1
                    name: "Kolkata"
                    plus_code: HCH8+R3
                  - id: 2
                    name: "Bengaluru"
                    plus_code: XJJ2+7X
                  - id: 3
                    name: "Mumbai"
                    plus_code: 3V6J+3C
  /stats/user-dashboard:
    get:
      summary: Get stats required for user dashboard
      description: |
        This endpoint returns few key stats for user, like: number of total cases, completed cases, open cases, overdue cases etc. The response can be filtered by: date range using the from_date and to_date parameter.
      tags:
        - "Stats"
      parameters:
        - name: from_date    
          in: query
          type: string      
          description: To filter results by a date, use this parameter.
        - name: to_date    
          in: query
          type: string      
          description: To filter results by a date range, use to_date parameter along with from_date parameter.    
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "Stats found"
              meta:
                type: object
              payload:
                type: object
                example:
                  {
                    total_cases: 20,
                    completed_cases: 12,
                    open_cases: 5,
                    overdue_cases: 3
                  }            

# Definitions
definitions:
  Case:
    type: "object"
    required:
      - "id"
      - "case_number"
      - "client_id"
      - "location_id"
      - "appointment_datetime"
    properties:
      id:
        type: "integer"
        example: 12
      case_number:
        type: "string"
        example: CS212
      client_id:
        type: "integer"        
        example: 345
      location_id:
        type: "integer"
        example: 4
      appointment_datetime:
        type: "string"
        example: 04-06-2022 10AM
      state:
        type: "string"
        enum:
          - "open"
          - "allocated"        
          - "in_progress"
          - "completed"
          - "closed"
          - "cancelled"
        example: allocated
      assignee_id:
        type: "integer"
        example: 123
      started_at:
        type: "string"
        example: 04-06-2022 10AM
      closed_at:
        type: "string" 
        example: 04-06-2022 11AM    
      actual_time:
        type: "integer"         
        example: 60
      rating:
        type: "integer"   
        example: 9
  CaseComment:
    type: object
    required:
      - "case_id"
      - "user_id"
    properties:
      id:
        type: integer
        example: 12
      case_id:
        type: integer
        example: 321
      comment:
        type: string
        example: Reached at location
      user_id:
        type: integer
        example: 32
  CaseTimeLog:
    type: object
    required:
      - "case_id"
      - "user_id"
      - "logged_time_in_min"
    properties:
      id:
        type: integer
        example: 12
      case_id:
        type: integer
        example: 321
      user_id:
        type: integer
        example: 32        
      logged_time_in_min:
        type: integer
        example: 60
      remarks:
        type: string
        example: "Fixed the camera module"
  User:
    type: "object"
    required:
      - "id"
      - "name"
      - "email"
      - "password"
      - "phone_number"
      - "location_id"
    properties:
      id:
        type: "integer"
      name:
        type: "string" 
      user_type:
        type: "integer" 
      email:
        type: "string" 
      password:
        type: "string" 
      phone_number:
        type: "string" 
      location_id:
        type: "integer" 
      is_available:
        type: "boolean" 
      avg_rating:
        type: "number" 
      work_days:
        type: "string" 
      working_hours:
        type: "string"       
      fcm_id:
        type: "string"               
  Client:
    type: "object"
    required:
      - "id"
      - "name"
      - "location_id"
      - "email"
      - "phone_number"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      location_id:
        type: "integer"
      email:
        type: "string"
      phone_number:
        type: "string"      
      contact_person_name:
        type: string
      contact_person_designation:
        type: string
      contact_person_phone:
        type: string
  Location:
    type: "object"
    required:
      - "id"
      - "name"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      plus_code:
        type: string
  # User payload samples
  SigninRequestBody:
    type: "object"
    properties:
      user:
        type: object
        properties: 
          email:
            type: "string"
            example: "avishek@geogo.in"    
          password:
            type: "string"
            example: "12345678"   
  SigninResponse:
    type: "object"
    properties:
      id:
        type: integer
        example: 123
      name:
        type: string
        example: Avishek Jana
      email:
        type: string
        example: avishek@geogo.in
      phone_number:
        type: string
        example: 8899199929
      location_id:
        type: integer
        example: 4
      is_available:
        type: boolean
        example: true
      avg_rating: 
        type: integer
        example: 8
      fcm_id:
        type: string
        example: b1c2b1b21b2b1vb2vb1vb2v1n21212
      access_token:
        type: string
        example: sqw1281w1njhj1.b1c2b1b21vb2v1n21212.12iwiqwiuqw8q8  
  UserDetailsResponse:
    type: "object"
    properties:
      id:
        type: integer
        example: 123
      name:
        type: string
        example: Avishek Jana
      email:
        type: string
        example: avishek@geogo.in
      phone_number:
        type: string
        example: 8899199929
      location_id:
        type: integer
        example: 4
      is_available:
        type: boolean
        example: true
      avg_rating: 
        type: integer
        example: 8      
  # Case payload samples
  CreateCaseRequestBody:
    type: object   
    properties:
      case:
        type: object
        properties: 
          case_number:
            type: "string"
            example: Cx100929  
          client_id:
            type: "string"
            example: 32     
          appointment_datetime:
            type: "string"
            example: 04-06-2022 10AM      
          location_id:
            type: "string"
            example: 4         
  UpdateCaseRequestBody:   
    type: object   
    properties:
      case:
        type: object
        properties: 
          state:
            type: "string"
            example: in_progress       
          assignee_id:
            type: number
            example: 4                                            
          appointment_datetime:
            type: "string"
            example: 04-06-2022 10AM 
          case_comments_attributes:
            type: array
            items:
              example:
                {
                  "comment": "Reached at location",
                  "attachment": <file>
                }
              # $ref: "#/definitions/CaseComment"
  AddCaseCommentRequestBody:
    type: object   
    properties:
      case_comment:
        type: object
        properties: 
          comment:
            type: "string"
            example: Reached at client location  
          attachment:
            type: "string"
            example: '<file>'
  CaseTimeLogRequestBody:
    type: object   
    properties:
      case_time_log:
        type: object
        properties: 
          logged_time_in_min:
            type: "integer"
            example: 60
          remarks:
            type: "string"
            example: "Fixed camera module"            
          attachment:
            type: "string"
            example: '<file>'            
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-Key